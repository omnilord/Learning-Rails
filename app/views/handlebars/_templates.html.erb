<script>

/*
  All of the code for running the above templates is stored here:
*/

$(function () {
  var maindiv, spinner = templates.spinner(),
      user = <%= current_user.to_json(only: [:id, :email, :created_at]).html_safe %>;

  const toggle_spinners = ($btn) => {
    $btn.parent().find('button').each(function () {
      $(this).html(spinner).prop('disabled', true);
    });
  };

  // Pre-load helpers
  Handlebars.registerHelper('math', function (l, op, r, options) {
    l = parseFloat(l);
    r = parseFloat(r);

    var v = { '+': (l + r), '-': (l - r), '*': (l * r), '/': (l / r), '%': (l % r) }[op];
    if (isNaN(v)) {
      return options.hash.hasOwnProperty('onNaN') ? options.hash.onNaN : '';
    }
    v = v.toFixed(options.hash.precision || -1);
    if (options.hash.thousands) {
      v = v.toString().replace(/\B(?=(\d{3})+(?!\d))/g, options.hash.thousands);
    }
    if (options.hash.prefix) {
      v = options.hash.prefix + v;
    }
    if (options.hash.suffix) {
      v+= options.hash.suffix;
    }
    return v;
  });
  
  $(document)
    .on('turbolinks:load ready', function () {
      var nav_search = $('.search-form').on({
            'ajax:before': () => { maindiv.html(templates.spinner()); },
            'ajax:success': function (ev, data, status) {
              var callback = $(this).data('template');
              console.log([this, callback, data.data]);
              maindiv.html(templates[callback](data.data));
            },
            'ajax:error': function (ev, xhr, status, err) {
              var type = $(this).closest('.toggling-form').data('searchfor');
              maindiv.html(templates.error({ msg: 'No ' + type + ' found.' }));
            }
          }).filter(function () {
            return !$(this).closest('.toggling-form').is('.invis');
          }).first(),
          search_val = nav_search.find('input[type="text"]').val();

      // Immediate executions
      maindiv = $('#main_content');
      if (search_val != '') {
        nav_search.submit();
      }
    })

  <% if user_signed_in? %>

    // Manipulating stock portfolio
    .on('click', 'button.add-stock-to-portfolio, button.subtract-stock-from-portfolio, button.add-stock-to-watchlist', function () {
      var $btn = $(this),
          $this = $btn.closest('[data-stock-id]'),
          stock_id = parseInt($this.attr('data-stock-id')) || null,
          user_stock_id = parseInt($this.attr('data-user-stocks-id')) || null,
          count = parseInt($btn.parent().siblings('input.stock-count-edit').val());

      if (count < 1) {
        return;
      }

      if ($btn.is('.subtract-stock-from-portfolio')) {
        count *= -1;
      } else if ($btn.is('.add-stock-to-watchlist')) {
        count = 0;
      }

      $.ajax({
        url: '<%= user_stocks_path %>' + (user_stock_id ? '/' + user_stock_id : ''),
        data: {
          user: user.id,
          stock_id: stock_id,
          user_stock_id: user_stock_id,
          count: isNaN(count) ? 0 : count
        },
        method: user_stock_id ? 'PATCH' : 'POST',
        dataType: 'json',
        beforeSend: toggle_spinners($btn)
      })
        .done((data) => { $this.replaceWith(templates.stock(data.data)); })
        .fail((data) => { $this.replaceWith(templates.error({msg: 'Failed to add stock.'})); });
    })
    .on('click', 'button.remove-stock-from-portfolio, button.remove-stock-from-watchlist', function () {
      var $btn = $(this),
          $this = $btn.closest('[data-stock-id]'),
          user_stock_id = parseInt($this.attr('data-user-stocks-id')) || null,
          action = $this.closest('[data-rm-action]').attr('data-rm-action');

      $.ajax({
        url: '<%= user_stocks_path %>/' + user_stock_id,
        method: 'DELETE',
        dataType: 'json',
        beforeSend: toggle_spinners($btn)
      })
        .done((data) => {
          if (action == 'remove') {
            $this.parent().remove();
          } else {
            $this.replaceWith(templates.stock(data.data));
          }
        })
        .fail((data) => { $this.replaceWith(templates.error({msg: 'Failed to remove stock.'})); });
    })

    // manipulating friendships
    .on('click', 'button.view-friend', function () {
      window.location.href = '<%= friends_path %>/' + $(this).closest('[data-user-id]').attr('data-user-id');
    })
    .on('click', 'button.add-friendship', function () {
      window.location.href = '<%= friends_path %>/' + $(this).closest('[data-user-id]').attr('data-user-id');
    })
    .on('click', 'button.remove-friendship', function () {
      var $btn = $(this),
          user_id = $btn.closest('[data-user-id]').attr('data-user-id');

      $.ajax({
        url: '<%= friends_path %>/' + user_id,
        method: 'DELETE',
        dataType: 'json',
        beforeSend: toggle_spinners($btn)
      })
        .done((data) => { $this.closest('tr').remove(); })
        .fail((data) => { $this.replaceWith(templates.error({msg: 'Failed to remove friendship.'})); });
    })

    // Handle numeric inputs into the count input
    .on('keyup keydown', 'input.stock-count-edit', function (ev) {
      if ((ev.keyCode < 48 || ev.keyCode > 57) && [8, 9, 13, 46].indexOf(ev.keyCode) == -1) {
        ev.preventDefault();
      }
    })
  <% end %>;
});
</script>
